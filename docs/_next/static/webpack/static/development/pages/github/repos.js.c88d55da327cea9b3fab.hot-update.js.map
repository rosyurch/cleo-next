{"version":3,"file":"static/webpack/static/development/pages/github/repos.js.c88d55da327cea9b3fab.hot-update.js","sources":["webpack:///./views/repos.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { connect } from 'react-redux'\nimport Repo from 'components/Repo'\nimport Input from 'generic/Input'\nimport Ul from 'generic/Ul'\nimport Flex from 'generic/Flex'\nimport Loading from 'components/Loading'\nimport Div from 'generic/Div'\n\nconst Repos = ({\n  userName,\n  userRepos,\n  setUserRepos,\n  defaultProfile,\n  isLoading,\n  userProfile,\n  setProfile,\n}) => {\n  const [sortByStars, setSortByStars] = useState(false)\n  const [query, setQuery] = useState('')\n\n  // get repositories\n  useEffect(() => {\n    if (!userRepos.length && userName) {\n      setUserRepos(userName)\n    } else if (defaultProfile && !userRepos.length) {\n      setUserRepos(defaultProfile)\n    }\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  // get profile data\n  useEffect(() => {\n    if (!userName) {\n      setProfile(defaultProfile)\n    }\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const sortedList = useMemo(\n    () =>\n      [...userRepos].sort((a, b) => b.stargazers_count - a.stargazers_count),\n    [userRepos]\n  )\n\n  const renderRepos = (reposList, searchTerm) =>\n    searchTerm\n      ? reposList.filter(\n          r =>\n            r.name.toLowerCase().includes(searchTerm) ||\n            (r.description &&\n              r.description.toLowerCase().includes(searchTerm)) ||\n            (r.language && r.language.toLowerCase().includes(searchTerm))\n        )\n      : reposList\n\n  return (\n    <Div width=\"100%\">\n      {userRepos.length ? (\n        <Flex\n          py={20}\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          borderBottom=\"1px solid #fff\"\n        >\n          <Input\n            type=\"text\"\n            aria-label=\"search\"\n            onChange={e => setQuery(e.target.value.toLowerCase())}\n          />\n          <label>\n            Sort by stars:\n            <input type=\"checkbox\" onChange={() => setSortByStars(s => !s)} />\n          </label>\n        </Flex>\n      ) : null}\n\n      {isLoading && !userRepos.length && <Loading>Loading...</Loading>}\n\n      <Ul display=\"flex\" flexWrap=\"wrap\">\n        {renderRepos(sortByStars ? sortedList : userRepos, query).map(r => (\n          <li key={r.id}>\n            <Repo data={r} />\n          </li>\n        ))}\n      </Ul>\n    </Div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  userName: state.userProfile.login,\n  userRepos: state.userRepos,\n  isLoading: state.isLoading,\n  userProfile: state.userProfile,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setUserRepos: dispatch.userRepos.getRepos,\n  setProfile: dispatch.userProfile.getProfile,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Repos)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AADA;AACA;AAIA;AAAA;AAGA;AAAA;AAHA;AACA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AAMA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;;;;A","sourceRoot":""}